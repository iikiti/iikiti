# See the configuration reference at https://symfony.com/bundles/SchebTwoFactorBundle/6.x/configuration.html
scheb_two_factor:

    # Trusted device feature
    trusted_device:
        enabled: true                 # If the trusted device feature should be enabled
        #manager: acme.custom_trusted_device_manager  # Use a custom trusted device manager
        lifetime: 5184000              # Lifetime of the trusted device token
        extend_lifetime: false         # Automatically extend lifetime of the trusted cookie on re-login
        #key: null                      # Encryption key for JWT token, must be at least 32 characters. If not set the
                                       # application's kernel.secret is used.
        cookie_name: trusted_device    # Name of the trusted device cookie
        cookie_secure: true           # true|false|auto Set the 'Secure' (HTTPS Only) flag on the trusted device cookie
        cookie_same_site: "strict"        # The same-site option of the cookie, can be "lax", "strict" or null
        #cookie_domain: ".example.com"  # Domain to use when setting the cookie, fallback to the request domain if not set
        #cookie_path: "/"               # Path to use when setting the cookie

    # Backup codes feature
    backup_codes:
        enabled: true                 # If the backup code feature should be enabled
        #manager: acme.custom_backup_code_manager  # Use a custom backup code manager

    # Email authentication config
    email:
        enabled: true                  # If email authentication should be enabled, default false
        #mailer: acme.custom_mailer_service  # Use alternative service to send the authentication code
        #code_generator: acme.custom_code_generator_service  # Use alternative service to generate authentication code
        #sender_email: me@example.com   # Sender email address
        #sender_name: John Doe          # Sender name
        digits: 5                      # Number of digits in authentication code
        template: security/2fa_form.html.twig   # Template used to render the authentication form
        #form_renderer: acme.custom_form_renderer  # Use a custom form renderer service

    # Google Authenticator config
    google:
        enabled: true                  # If Google Authenticator should be enabled, default false
        #server_name: Server Name       # Server name used in QR code
        #issuer: Issuer Name            # Issuer name used in QR code
        digits: 6                      # Number of digits in authentication code
        window: 10                      # Depends on the version of Spomky-Labs/otphp used:
                                       # Until v10: How many codes before/after the current one would be accepted
                                       # From v11: Acceptable time drift in seconds
        template: security/2fa_form.html.twig   # Template used to render the authentication form
        #form_renderer: acme.custom_form_renderer  # Use a custom form renderer service

    # TOTP authentication config
    totp:
        enabled: true                  # If TOTP authentication should be enabled, default false
        #server_name: Server Name       # Server name used in QR code
        #issuer: Issuer Name            # Issuer name used in QR code
        window: 10                      # Depends on the version of Spomky-Labs/otphp used:
                                       # Until v10: How many codes before/after the current one would be accepted
                                       # From v11: Acceptable time drift in seconds
        parameters:                    # Additional parameters added in the QR code
            #image: 'https://my-service/img/logo.png'
        template: security/2fa_form.html.twig   # Template used to render the authentication form
        #form_renderer: acme.custom_form_renderer  # Use a custom form renderer service

    # The service which is used to persist data in the user object. By default Doctrine is used. If your entity is
    # managed by something else (e.g. an API), you have to implement a custom persister.
    # Must implement Scheb\TwoFactorBundle\Model\PersisterInterface
    #persister: acme.custom_persister

    # If your Doctrine user object is managed by a model manager, which is not the default one, you have to
    # set this option. Name of entity manager or null, which uses the default one.
    model_manager_name: null

    # The security token classes, which trigger two-factor authentication.
    # By default the bundle only reacts to Symfony's username+password authentication. If you want to enable
    # two-factor authentication for other authentication methods, add their security token classes.
    security_tokens:
        - Symfony\Component\Security\Core\Authentication\Token\UsernamePasswordToken
        - Symfony\Component\Security\Http\Authenticator\Token\PostAuthenticationToken

    # A list of IP addresses or netmasks, which will not trigger two-factor authentication.
    # Supports IPv4, IPv6 and IP subnet masks.
    ip_whitelist:
        #- 127.0.0.1  # One IPv4
        #- 192.168.0.0/16  # IPv4 subnet
        #- 2001:0db8:85a3:0000:0000:8a2e:0370:7334  # One IPv6
        #- 2001:db8:abcd:0012::0/64  # IPv6 subnet

    # If you want to have your own implementation to retrieve the whitelisted IPs.
    # The configuration option "ip_whitelist" becomes meaningless in that case.
    # Must implement Scheb\TwoFactorBundle\Security\TwoFactor\IpWhitelist\IpWhitelistProviderInterface
    #ip_whitelist_provider: acme.custom_ip_whitelist_provider

    # If you want to exchange/extend the TwoFactorToken class, which is used by the bundle, you can have a factory
    # service providing your own implementation.
    # Must implement Scheb\TwoFactorBundle\Security\Authentication\Token\TwoFactorTokenFactoryInterface
    #two_factor_token_factory: acme.custom_two_factor_token_factory

    # If you need custom conditions when to perform two-factor authentication.
    # Must implement Scheb\TwoFactorBundle\Security\TwoFactor\Condition\TwoFactorConditionInterface
    #two_factor_condition: acme.custom_two_factor_condition
